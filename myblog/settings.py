"""
Django settings for myblog project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import django_heroku
from pathlib import Path
import urllib.request
#from internet_connection import check_internet

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

def check_internet(host="https://www.google.com"):
    DATABASE ={}
    try:
        urllib.request.urlopen(host)
        
        DATABASE= {
            'ENGINE': 'django.db.backends.postgresql',
        
        
        'NAME':'ddtekq1s61dsid',
        'USER':'lrnvrotvqdhdol',
        'PASSWORD':'3559911b6b0f980dc17b2381a5156416a043ac3e17b0caed8827ce504b958938',
        'HOST':'ec2-34-225-159-178.compute-1.amazonaws.com',
        'PORT':5432
        }
        print("there is internet the database is set to heroku postgress")
        return DATABASE
    except:
        DATABASE ={
             'ENGINE': 'django.db.backends.sqlite3',
        
        'NAME': BASE_DIR / 'db.sqlite3',
        }
        print("no internet the adabase is set to default sqlite")
        return DATABASE

    


#check_internet()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-s5!to1jn&(sctsauinipai+hm@4k+_irdh6%_)oqltou9cm-j0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CORS_ALLOW_ALL_ORIGINS=True
ALLOWED_HOSTS = [ 'https://programminghero.herokuapp.com/',
                    'http://127.0.0.1:8000/',
                    'http://localhost:3000/',
                    'https://amnsolution.vercel.app/',
        ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    #allauth
    'django.contrib.sites',
    'crispy_forms',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #core header
    'corsheaders',
    #'account.apps.AccountConfig',
    'about_me.apps.AboutMeConfig',
    'blog.apps.BlogConfig',
    'myaccount.apps.MyaccountConfig',

    #allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    'ckeditor',
    'taggit',
    'ckeditor_uploader',
    'django_bootstrap_breadcrumbs',
    'django_social_share',
    'rest_framework',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #core header
      'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default':check_internet() #{
        #'ENGINE': 'django.db.backends.sqlite3',
        #'ENGINE': 'django.db.backends.postgresql',
        #'NAME': BASE_DIR / 'db.sqlite3',
        
#         'NAME':'ddtekq1s61dsid',
#         'USER':'lrnvrotvqdhdol',
#         'PASSWORD':'3559911b6b0f980dc17b2381a5156416a043ac3e17b0caed8827ce504b958938',
#         'HOST':'ec2-34-225-159-178.compute-1.amazonaws.com',
#         'PORT':5432
# #         URI
# # postgres://lrnvrotvqdhdol:3559911b6b0f980dc17b2381a5156416a043ac3e17b0caed8827ce504b958938@ec2-34-225-159-178.compute-1.amazonaws.com:5432/ddtekq1s61dsid
# # Heroku CLI
# # heroku pg:psql postgresql-concentric-20472 --app programminghero
#     }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#Caching
CACHES = {
   'default': {
      'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
      'LOCATION': '127.0.0.1:11211',
   }
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Brazzaville'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
     os.path.join(BASE_DIR,'src')
    
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#custom settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/media')
AUTH_USER_MODEL = 'myaccount.Account'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL ='blog/home'
LOGOUT_REDIRECT_URL = '/'
#allauth
AUTHENTICATION_BACKENDS = [
    #...
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    #...
]

SITE_ID = 1

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS =1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION =None #"mandatory"
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 10
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
#ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True

#coreheader

CORS_ORIGIN_ALLOW_ALL = False
CORS_ORIGIN_WHITELIST = [

       'http://127.0.0.1:8000',
       'https://programminghero.herokuapp.com',
       'https://localhost:3000',

]
# CORS_ORIGIN_ALLOW_ALL = True

# CORS_ALLOW_CREDENTIALS = True


# CORS_ALLOW_METHODS = [
#     "DELETE",
#     "GET",
#     "OPTIONS",
#     "PATCH",
#     "POST",
#     "PUT",
# ]
# CORS_ALLOW_HEADERS = [
#     "accept",
#     "accept-encoding",
#     "authorization",
#     "content-type",
#     "dnt",
#     "origin",
#     "user-agent",
#     "x-csrftoken",
#     "x-requested-with",
# ]

# Activate Django-Heroku.
django_heroku.settings(locals())

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'amnuhu91'
# EMAIL_HOST_PASSWORD = 'aliyu#@91'
#ckeditor
def get_filename(filename):
    return filename.upper()
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = 'pillow'
#CKEDITOR_FILENAME_GENERATOR = 'utils.get_filename'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}